1.超市系统面向对象的设计思路

（1）首先考虑整个过程所涉及到的所有对象及各对象的职责
    商品：拥有id，名称，价格，类型，计量单位，库存量等属性，拥有被购买，展示等方法。
    货架（存商品的地方）：聚合了商品，相当是一个商品的容器，拥有添加商品，取出（删除）商品，统计商品价格，打印商品列表等方法。
    购物车：和货架的功能一样，可以存取商品
    销售员：负责和用户交互，询问用户问题并作出响应。具体有：
        当用户选择列出商品时，列出超市的所有商品
        当用户选择购买时，询问用户要购买什么，然后从货架中取出商品，放入购物车中，用户选择删除时，操作类似。
        当用户选择结帐时进行结帐和打印凭条的操作
        。。。
        。。。

（2）由上一步的分析抽象出类
    商品（item）  特价商品多了一个原价现价的机制，可以继承自item并重写相关的方法。
    货架（store）
    购物车（store）  //货架和购物车的操作相似，可以归为一个类
    销售员（seller）

（3）用C++实现每个类的职责，当你发现每个类都已经写好，整个程序就已经写好了。。。这就是完全面向对象的写法。


2.代码
    附上的代码又丑又长。（可以体会纯面向对象在这种规模的项目中反而没有优势）。
    为了展示更多的语法，并没有考虑效率的问题。（可以在代码中体会继承与多态的思想和应用,以及链表的构造）
    由于时间仓促（懒），所有的析构函数都还没写。内存泄漏问题严重。。
    有部分输入的过滤可以写成函数

